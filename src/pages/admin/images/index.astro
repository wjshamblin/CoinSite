---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { readdir } from 'node:fs/promises';
import { join } from 'node:path';
import { requireAuth } from '../../../lib/authMiddleware';

export const prerender = false; // Enable server-side rendering for authentication

// Check authentication
const user = await requireAuth(Astro);

// Get list of images from public directories
let collectionImages = [];
let coinImages = [];

try {
	const collectionsPath = join(process.cwd(), 'public', 'images', 'collections');
	collectionImages = await readdir(collectionsPath).catch(() => []);
} catch (error) {
	// Directory doesn't exist yet
}

try {
	const coinsPath = join(process.cwd(), 'public', 'images', 'coins');
	coinImages = await readdir(coinsPath).catch(() => []);
} catch (error) {
	// Directory doesn't exist yet
}

// Filter only image files
const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp'];
collectionImages = collectionImages.filter(file =>
	imageExtensions.some(ext => file.toLowerCase().endsWith(ext))
);
coinImages = coinImages.filter(file =>
	imageExtensions.some(ext => file.toLowerCase().endsWith(ext))
);
---

<AdminLayout title="Image Management">
	<div class="page-header">
		<h1>Image Management</h1>
		<div class="header-actions">
			<button onclick="showUploadModal()" class="btn btn-primary">
				üì§ Upload Images
			</button>
		</div>
	</div>

	<div class="image-sections">
		<section class="image-section">
			<h2>Collection Thumbnails ({collectionImages.length})</h2>
			<p class="section-description">
				Images for collection thumbnails. Recommended size: 400x200px
			</p>

			{collectionImages.length > 0 ? (
				<div class="image-grid">
					{collectionImages.map((image) => (
						<div class="image-item">
							<img
								src={`/images/collections/${image}`}
								alt={image}
								loading="lazy"
							/>
							<div class="image-info">
								<code>{image}</code>
								<div class="image-actions">
									<button
										onclick={`copyFilename('${image}')`}
										class="btn btn-sm"
									>
										Copy Name
									</button>
									<button
										onclick={`deleteImage('collections', '${image}')`}
										class="btn btn-sm btn-danger"
									>
										Delete
									</button>
								</div>
							</div>
						</div>
					))}
				</div>
			) : (
				<div class="empty-state">
					<p>No collection images found. Upload some images to get started.</p>
				</div>
			)}
		</section>

		<section class="image-section">
			<h2>Coin Images ({coinImages.length})</h2>
			<p class="section-description">
				Images for individual coins. Recommended size: 400x300px
			</p>

			{coinImages.length > 0 ? (
				<div class="image-grid">
					{coinImages.map((image) => (
						<div class="image-item">
							<img
								src={`/images/coins/${image}`}
								alt={image}
								loading="lazy"
							/>
							<div class="image-info">
								<code>{image}</code>
								<div class="image-actions">
									<button
										onclick={`copyFilename('${image}')`}
										class="btn btn-sm"
									>
										Copy Name
									</button>
									<button
										onclick={`deleteImage('coins', '${image}')`}
										class="btn btn-sm btn-danger"
									>
										Delete
									</button>
								</div>
							</div>
						</div>
					))}
				</div>
			) : (
				<div class="empty-state">
					<p>No coin images found. Upload some images to get started.</p>
				</div>
			)}
		</section>
	</div>

	<!-- Upload Modal -->
	<div id="uploadModal" class="modal">
		<div class="modal-content">
			<div class="modal-header">
				<h3>Upload Images</h3>
				<button onclick="closeUploadModal()" class="close-btn">&times;</button>
			</div>
			<div class="modal-body">
				<form id="uploadForm" enctype="multipart/form-data">
					<div class="upload-section">
						<h4>üì§ Upload Images</h4>

						<div class="form-group">
							<label for="uploadType">Upload to:</label>
							<select id="uploadType" name="type" required>
								<option value="">Select destination...</option>
								<option value="collections">Collection Thumbnails (400x200px recommended)</option>
								<option value="coins">Coin Images (400x300px recommended)</option>
							</select>
						</div>

						<div class="form-group">
							<label for="fileInput">Select Images:</label>
							<div class="file-drop-zone" onclick="document.getElementById('fileInput').click()">
								<input type="file" id="fileInput" name="files" multiple accept="image/*" style="display: none;">
								<div class="drop-zone-content">
									<p>üìÅ Click to select images or drag and drop</p>
									<p class="small-text">Supports: JPG, PNG, GIF, WebP (max 5MB each)</p>
								</div>
							</div>
						</div>

						<div id="selectedFiles" class="selected-files"></div>

						<div id="uploadProgress" class="upload-progress" style="display: none;">
							<div class="progress-bar">
								<div class="progress-fill"></div>
							</div>
							<p class="progress-text">Uploading...</p>
						</div>

						<div id="uploadResult" class="upload-result"></div>
					</div>
				</form>
			</div>
			<div class="modal-footer">
				<button type="button" onclick="closeUploadModal()" class="btn btn-outline">Close</button>
				<button type="button" onclick="uploadFiles()" class="btn btn-primary" id="uploadBtn" disabled>Upload Images</button>
			</div>
		</div>
	</div>
</AdminLayout>

<style>
	.page-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 2rem;
		padding-bottom: 1rem;
		border-bottom: 1px solid #dee2e6;
	}

	.page-header h1 {
		margin: 0;
		color: #495057;
	}

	.header-actions {
		display: flex;
		gap: 0.5rem;
	}

	.btn {
		display: inline-block;
		padding: 0.5rem 1rem;
		background: #007bff;
		color: white;
		text-decoration: none;
		border-radius: 4px;
		border: 1px solid transparent;
		font-size: 0.9rem;
		cursor: pointer;
		transition: all 0.2s;
	}

	.btn:hover {
		background: #0056b3;
	}

	.btn-primary {
		background: #007bff;
	}

	.btn-sm {
		padding: 0.25rem 0.5rem;
		font-size: 0.8rem;
	}

	.btn-outline {
		background: transparent;
		color: #007bff;
		border-color: #007bff;
	}

	.btn-outline:hover {
		background: #007bff;
		color: white;
	}

	.btn-danger {
		background: #dc3545;
	}

	.btn-danger:hover {
		background: #c82333;
	}

	.image-sections {
		display: flex;
		flex-direction: column;
		gap: 3rem;
	}

	.image-section {
		background: white;
		padding: 2rem;
		border-radius: 8px;
		box-shadow: 0 2px 4px rgba(0,0,0,0.1);
	}

	.image-section h2 {
		margin-top: 0;
		color: #495057;
		display: flex;
		align-items: center;
		gap: 0.5rem;
	}

	.section-description {
		color: #6c757d;
		margin-bottom: 1.5rem;
		font-size: 0.9rem;
	}

	.image-grid {
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
		gap: 1rem;
	}

	.image-item {
		border: 1px solid #dee2e6;
		border-radius: 8px;
		overflow: hidden;
		transition: box-shadow 0.2s;
	}

	.image-item:hover {
		box-shadow: 0 4px 12px rgba(0,0,0,0.15);
	}

	.image-item img {
		width: 100%;
		height: 150px;
		object-fit: cover;
		display: block;
	}

	.image-info {
		padding: 1rem;
	}

	.image-info code {
		display: block;
		background: #f8f9fa;
		padding: 0.4rem;
		border-radius: 4px;
		font-size: 0.8rem;
		margin-bottom: 0.75rem;
		word-break: break-all;
	}

	.image-actions {
		display: flex;
		gap: 0.5rem;
	}

	.empty-state {
		text-align: center;
		padding: 2rem;
		color: #6c757d;
		background: #f8f9fa;
		border-radius: 8px;
		border: 2px dashed #dee2e6;
	}

	/* Modal Styles */
	.modal {
		display: none;
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background: rgba(0,0,0,0.5);
		z-index: 1000;
	}

	.modal-content {
		background: white;
		width: 90%;
		max-width: 600px;
		margin: 5% auto;
		border-radius: 8px;
		box-shadow: 0 4px 20px rgba(0,0,0,0.3);
	}

	.modal-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 1.5rem;
		border-bottom: 1px solid #dee2e6;
	}

	.modal-header h3 {
		margin: 0;
		color: #495057;
	}

	.close-btn {
		background: none;
		border: none;
		font-size: 1.5rem;
		cursor: pointer;
		color: #6c757d;
		padding: 0;
		width: 30px;
		height: 30px;
		display: flex;
		align-items: center;
		justify-content: center;
	}

	.close-btn:hover {
		color: #495057;
	}

	.modal-body {
		padding: 1.5rem;
	}

	.modal-footer {
		padding: 1.5rem;
		border-top: 1px solid #dee2e6;
		display: flex;
		gap: 1rem;
		justify-content: flex-end;
	}

	.upload-instructions h4 {
		color: #495057;
		margin-bottom: 1rem;
	}

	.upload-instructions ol {
		margin-bottom: 1.5rem;
		padding-left: 1.5rem;
	}

	.upload-instructions li {
		margin-bottom: 0.5rem;
		color: #6c757d;
	}

	.directory-paths {
		background: #f8f9fa;
		padding: 1rem;
		border-radius: 4px;
		margin: 1rem 0;
	}

	.path-item {
		margin-bottom: 0.5rem;
	}

	.path-item:last-child {
		margin-bottom: 0;
	}

	.path-item strong {
		color: #495057;
		margin-right: 0.5rem;
	}

	.path-item code {
		background: #e9ecef;
		padding: 0.2rem 0.4rem;
		border-radius: 3px;
		font-size: 0.9rem;
	}

	.note {
		background: #fff3cd;
		color: #856404;
		padding: 1rem;
		border-radius: 4px;
		border-left: 4px solid #ffc107;
		margin-top: 1rem;
		font-size: 0.9rem;
	}

	/* Upload Form Styles */
	.upload-section {
		max-width: 100%;
	}

	.upload-section h4 {
		color: #495057;
		margin-bottom: 1.5rem;
	}

	.form-group {
		margin-bottom: 1.5rem;
	}

	.form-group label {
		display: block;
		margin-bottom: 0.5rem;
		color: #495057;
		font-weight: 500;
	}

	.form-group select {
		width: 100%;
		padding: 0.5rem;
		border: 1px solid #ced4da;
		border-radius: 4px;
		background: white;
		color: #495057;
		font-size: 0.9rem;
	}

	.form-group select:focus {
		outline: none;
		border-color: #007bff;
		box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
	}

	.file-drop-zone {
		border: 2px dashed #ced4da;
		border-radius: 8px;
		padding: 2rem;
		text-align: center;
		cursor: pointer;
		transition: all 0.2s;
		background: #f8f9fa;
	}

	.file-drop-zone:hover {
		border-color: #007bff;
		background: #e3f2fd;
	}

	.file-drop-zone.dragover {
		border-color: #007bff;
		background: #e3f2fd;
		transform: scale(1.02);
	}

	.drop-zone-content p {
		margin: 0;
		color: #6c757d;
	}

	.drop-zone-content .small-text {
		font-size: 0.8rem;
		margin-top: 0.5rem;
	}

	.selected-files {
		margin-top: 1rem;
	}

	.file-item {
		background: #f8f9fa;
		padding: 0.75rem;
		border-radius: 4px;
		margin-bottom: 0.5rem;
		display: flex;
		justify-content: space-between;
		align-items: center;
	}

	.file-info {
		display: flex;
		flex-direction: column;
	}

	.file-name {
		font-weight: 500;
		color: #495057;
	}

	.file-size {
		font-size: 0.8rem;
		color: #6c757d;
	}

	.remove-file {
		background: #dc3545;
		color: white;
		border: none;
		padding: 0.25rem 0.5rem;
		border-radius: 3px;
		cursor: pointer;
		font-size: 0.8rem;
	}

	.remove-file:hover {
		background: #c82333;
	}

	.upload-progress {
		margin-top: 1rem;
		padding: 1rem;
		background: #f8f9fa;
		border-radius: 4px;
	}

	.progress-bar {
		width: 100%;
		height: 8px;
		background: #e9ecef;
		border-radius: 4px;
		overflow: hidden;
		margin-bottom: 0.5rem;
	}

	.progress-fill {
		height: 100%;
		background: #007bff;
		width: 0%;
		transition: width 0.3s;
	}

	.progress-text {
		margin: 0;
		font-size: 0.9rem;
		color: #6c757d;
	}

	.upload-result {
		margin-top: 1rem;
		padding: 1rem;
		border-radius: 4px;
		display: none;
	}

	.upload-result.success {
		background: #d4edda;
		color: #155724;
		border: 1px solid #c3e6cb;
	}

	.upload-result.error {
		background: #f8d7da;
		color: #721c24;
		border: 1px solid #f5c6cb;
	}

	@media (max-width: 768px) {
		.page-header {
			flex-direction: column;
			align-items: flex-start;
			gap: 1rem;
		}

		.image-grid {
			grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
		}

		.modal-content {
			width: 95%;
			margin: 2% auto;
		}

		.modal-footer {
			flex-direction: column;
		}
	}
</style>

<script>
	let selectedFiles = [];

	window.showUploadModal = function() {
		console.log('showUploadModal called');
		document.getElementById('uploadModal').style.display = 'block';
		resetUploadForm();
	}

	window.closeUploadModal = function() {
		document.getElementById('uploadModal').style.display = 'none';
		resetUploadForm();
	}

	function resetUploadForm() {
		selectedFiles = [];
		document.getElementById('uploadType').value = '';
		document.getElementById('fileInput').value = '';
		document.getElementById('selectedFiles').innerHTML = '';
		document.getElementById('uploadBtn').disabled = true;
		document.getElementById('uploadProgress').style.display = 'none';
		document.getElementById('uploadResult').style.display = 'none';
	}

	window.copyFilename = function(filename) {
		navigator.clipboard.writeText(filename).then(() => {
			// Show temporary success message
			const button = event.target;
			const originalText = button.textContent;
			button.textContent = 'Copied!';
			button.style.background = '#28a745';

			setTimeout(() => {
				button.textContent = originalText;
				button.style.background = '';
			}, 2000);
		}).catch(() => {
			alert('Failed to copy filename to clipboard');
		});
	}

	window.deleteImage = function(type, filename) {
		if (confirm(`Are you sure you want to delete "${filename}"?`)) {
			fetch(`/admin/api/images/${type}/${filename}`, {
				method: 'DELETE',
			})
			.then(response => {
				if (response.ok) {
					location.reload();
				} else {
					alert('Error deleting image. You may need to delete it manually from the file system.');
				}
			})
			.catch(error => {
				alert('Error deleting image. You may need to delete it manually from the file system.');
			});
		}
	}

	function formatFileSize(bytes) {
		if (bytes === 0) return '0 Bytes';
		const k = 1024;
		const sizes = ['Bytes', 'KB', 'MB', 'GB'];
		const i = Math.floor(Math.log(bytes) / Math.log(k));
		return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
	}

	function updateSelectedFiles() {
		const container = document.getElementById('selectedFiles');
		const uploadBtn = document.getElementById('uploadBtn');

		if (selectedFiles.length === 0) {
			container.innerHTML = '';
			uploadBtn.disabled = true;
			return;
		}

		const uploadType = document.getElementById('uploadType').value;
		uploadBtn.disabled = !uploadType || selectedFiles.length === 0;

		container.innerHTML = selectedFiles.map((file, index) => `
			<div class="file-item">
				<div class="file-info">
					<div class="file-name">${file.name}</div>
					<div class="file-size">${formatFileSize(file.size)}</div>
				</div>
				<button type="button" class="remove-file" onclick="removeFile(${index})">Remove</button>
			</div>
		`).join('');
	}

	function removeFile(index) {
		selectedFiles.splice(index, 1);
		updateSelectedFiles();
	}

	window.uploadFiles = async function() {
		console.log('uploadFiles called');
		const uploadType = document.getElementById('uploadType').value;
		console.log('Upload type:', uploadType);
		console.log('Selected files:', selectedFiles);

		if (!uploadType || selectedFiles.length === 0) {
			alert('Please select upload type and files');
			return;
		}

		const formData = new FormData();
		formData.append('type', uploadType);

		selectedFiles.forEach(file => {
			formData.append('files', file);
		});

		const uploadBtn = document.getElementById('uploadBtn');
		const progressDiv = document.getElementById('uploadProgress');
		const resultDiv = document.getElementById('uploadResult');

		uploadBtn.disabled = true;
		progressDiv.style.display = 'block';
		resultDiv.style.display = 'none';

		try {
			console.log('Starting fetch to /admin/api/upload');
			const response = await fetch('/admin/api/upload', {
				method: 'POST',
				body: formData
			});
			console.log('Response received:', response);

			const result = await response.json();
			console.log('Result:', result);

			progressDiv.style.display = 'none';

			if (response.ok && result.success) {
				resultDiv.className = 'upload-result success';
				resultDiv.textContent = result.message;
				resultDiv.style.display = 'block';

				// Reset form after successful upload
				setTimeout(() => {
					location.reload();
				}, 2000);
			} else {
				resultDiv.className = 'upload-result error';
				resultDiv.textContent = result.error || 'Upload failed';
				resultDiv.style.display = 'block';
			}
		} catch (error) {
			progressDiv.style.display = 'none';
			resultDiv.className = 'upload-result error';
			resultDiv.textContent = 'Network error during upload';
			resultDiv.style.display = 'block';
		}

		uploadBtn.disabled = false;
	}

	// File input change handler
	document.addEventListener('DOMContentLoaded', function() {
		const fileInput = document.getElementById('fileInput');
		const dropZone = document.querySelector('.file-drop-zone');
		const uploadTypeSelect = document.getElementById('uploadType');

		fileInput.addEventListener('change', function(e) {
			const files = Array.from(e.target.files);
			selectedFiles = [...selectedFiles, ...files];
			updateSelectedFiles();
		});

		uploadTypeSelect.addEventListener('change', function() {
			updateSelectedFiles();
		});

		// Drag and drop functionality
		dropZone.addEventListener('dragover', function(e) {
			e.preventDefault();
			dropZone.classList.add('dragover');
		});

		dropZone.addEventListener('dragleave', function(e) {
			e.preventDefault();
			dropZone.classList.remove('dragover');
		});

		dropZone.addEventListener('drop', function(e) {
			e.preventDefault();
			dropZone.classList.remove('dragover');

			const files = Array.from(e.dataTransfer.files);
			const imageFiles = files.filter(file => file.type.startsWith('image/'));

			if (imageFiles.length !== files.length) {
				alert('Only image files are allowed');
			}

			selectedFiles = [...selectedFiles, ...imageFiles];
			updateSelectedFiles();
		});
	});

	// Close modal when clicking outside
	window.onclick = function(event) {
		const modal = document.getElementById('uploadModal');
		if (event.target === modal) {
			closeUploadModal();
		}
	}
</script>